{"ast":null,"code":"// src/services/Airtable.js\n\nconst baseUrl = 'http://localhost:5000/api';\n\n/*\r\n// Use the Bearer token for authentication (fetching it from environment variable)\r\nconst headers = {\r\n    Authorization: `Bearer ${process.env.REACT_APP_AIRTABLE_API_TOKEN}`,\r\n    'Content-Type': 'application/json'\r\n};\r\n*/\n\n// Generic function to fetch records from a specific table\nconst fetchRecords = async tableName => {\n  try {\n    const response = await fetch(`${baseUrl}/${tableName}`, {\n      headers\n    });\n    if (!response.ok) {\n      throw new Error(`Error: ${response.statusText}`);\n    }\n    const data = await response.json();\n    return data.records;\n  } catch (error) {\n    console.error(`Error fetching data from table ${tableName}:`, error);\n    return [];\n  }\n};\n\n// Function to get data for Navbar or Header links\nexport const getHeaders = async () => {\n  const records = await fetchRecords('Headers');\n  return records.map(record => ({\n    page: record.fields.Page,\n    link: record.fields.Link\n  }));\n};\n\n// Function to get Meetings information\nexport const getMeetings = async () => {\n  const records = await fetchRecords('Meetings');\n  return records.map(record => ({\n    date: record.fields.Date,\n    // Assuming there's a \"Date\" field in Meetings\n    time: record.fields.Time,\n    // Assuming there's a \"Time\" field in Meetings\n    agenda: record.fields.Agenda // Assuming there's an \"Agenda\" field in Meetings\n  }));\n};\n\n// Function to get Members information\nexport const getMembers = async () => {\n  const records = await fetchRecords('Members');\n  return records.map(record => {\n    var _record$fields$Profil, _record$fields$Profil2;\n    return {\n      name: record.fields.Name,\n      position: record.fields.Position,\n      profilePicture: (_record$fields$Profil = record.fields['Profile Picture']) === null || _record$fields$Profil === void 0 ? void 0 : (_record$fields$Profil2 = _record$fields$Profil[0]) === null || _record$fields$Profil2 === void 0 ? void 0 : _record$fields$Profil2.url // Access the profile picture\n    };\n  });\n};\n\n// Function to get About Us information\nexport const getAboutUs = async () => {\n  const records = await fetchRecords('AboutUs');\n  return records.map(record => ({\n    tabName: record.fields.TabName,\n    // Assuming there's a \"TabName\" field\n    content: record.fields.Content // Assuming there's a \"Content\" field\n  }));\n};\n\n// Function to get Past Cars information\nexport const getPastCars = async () => {\n  const records = await fetchRecords('PastCars');\n  return records.map(record => {\n    var _record$fields$Image, _record$fields$Image$;\n    return {\n      carName: record.fields.CarName,\n      // Assuming there's a \"CarName\" field\n      year: record.fields.Year,\n      description: record.fields.Description,\n      imageUrl: (_record$fields$Image = record.fields.Image) === null || _record$fields$Image === void 0 ? void 0 : (_record$fields$Image$ = _record$fields$Image[0]) === null || _record$fields$Image$ === void 0 ? void 0 : _record$fields$Image$.url // Access the image of the car\n    };\n  });\n};\n\n// Function to get Sponsors information\nexport const getSponsors = async () => {\n  const records = await fetchRecords('Sponsors');\n  return records.map(record => {\n    var _record$fields$Logo, _record$fields$Logo$;\n    return {\n      name: record.fields.Name,\n      logoUrl: (_record$fields$Logo = record.fields.Logo) === null || _record$fields$Logo === void 0 ? void 0 : (_record$fields$Logo$ = _record$fields$Logo[0]) === null || _record$fields$Logo$ === void 0 ? void 0 : _record$fields$Logo$.url,\n      // Access sponsor logo\n      website: record.fields.Website\n    };\n  });\n};\n\n// Function to fetch specific page content based on a filter formula\nexport const getPageContent = async page => {\n  try {\n    const url = `${baseUrl}/Pages?filterByFormula={Page}=\"${page}\"`;\n    const response = await fetch(url, {\n      headers\n    });\n    if (!response.ok) {\n      throw new Error(`Error: ${response.statusText}`);\n    }\n    const data = await response.json();\n    return data.records.length ? data.records[0].fields : null;\n  } catch (error) {\n    console.error(\"Error fetching page content:\", error);\n    return null;\n  }\n};","map":{"version":3,"names":["baseUrl","fetchRecords","tableName","response","fetch","headers","ok","Error","statusText","data","json","records","error","console","getHeaders","map","record","page","fields","Page","link","Link","getMeetings","date","Date","time","Time","agenda","Agenda","getMembers","_record$fields$Profil","_record$fields$Profil2","name","Name","position","Position","profilePicture","url","getAboutUs","tabName","TabName","content","Content","getPastCars","_record$fields$Image","_record$fields$Image$","carName","CarName","year","Year","description","Description","imageUrl","Image","getSponsors","_record$fields$Logo","_record$fields$Logo$","logoUrl","Logo","website","Website","getPageContent","length"],"sources":["D:/Programming_Folder/Team_Website/team-website-redone/client/src/services/Airtable.js"],"sourcesContent":["// src/services/Airtable.js\r\n\r\nconst baseUrl = 'http://localhost:5000/api';\r\n\r\n/*\r\n// Use the Bearer token for authentication (fetching it from environment variable)\r\nconst headers = {\r\n    Authorization: `Bearer ${process.env.REACT_APP_AIRTABLE_API_TOKEN}`,\r\n    'Content-Type': 'application/json'\r\n};\r\n*/\r\n\r\n// Generic function to fetch records from a specific table\r\nconst fetchRecords = async (tableName) => {\r\n    try {\r\n        const response = await fetch(`${baseUrl}/${tableName}`, { headers });\r\n        \r\n        if (!response.ok) {\r\n            throw new Error(`Error: ${response.statusText}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        return data.records;\r\n    } catch (error) {\r\n        console.error(`Error fetching data from table ${tableName}:`, error);\r\n        return [];\r\n    }\r\n};\r\n\r\n// Function to get data for Navbar or Header links\r\nexport const getHeaders = async () => {\r\n    const records = await fetchRecords('Headers');\r\n    return records.map(record => ({\r\n        page: record.fields.Page,\r\n        link: record.fields.Link\r\n    }));\r\n};\r\n\r\n// Function to get Meetings information\r\nexport const getMeetings = async () => {\r\n    const records = await fetchRecords('Meetings');\r\n    return records.map(record => ({\r\n        date: record.fields.Date,   // Assuming there's a \"Date\" field in Meetings\r\n        time: record.fields.Time,   // Assuming there's a \"Time\" field in Meetings\r\n        agenda: record.fields.Agenda   // Assuming there's an \"Agenda\" field in Meetings\r\n    }));\r\n};\r\n\r\n// Function to get Members information\r\nexport const getMembers = async () => {\r\n    const records = await fetchRecords('Members');\r\n    return records.map(record => ({\r\n        name: record.fields.Name,\r\n        position: record.fields.Position,\r\n        profilePicture: record.fields['Profile Picture']?.[0]?.url,  // Access the profile picture\r\n    }));\r\n};\r\n\r\n// Function to get About Us information\r\nexport const getAboutUs = async () => {\r\n    const records = await fetchRecords('AboutUs');\r\n    return records.map(record => ({\r\n        tabName: record.fields.TabName,   // Assuming there's a \"TabName\" field\r\n        content: record.fields.Content,   // Assuming there's a \"Content\" field\r\n    }));\r\n};\r\n\r\n// Function to get Past Cars information\r\nexport const getPastCars = async () => {\r\n    const records = await fetchRecords('PastCars');\r\n    return records.map(record => ({\r\n        carName: record.fields.CarName,   // Assuming there's a \"CarName\" field\r\n        year: record.fields.Year,\r\n        description: record.fields.Description,\r\n        imageUrl: record.fields.Image?.[0]?.url,  // Access the image of the car\r\n    }));\r\n};\r\n\r\n// Function to get Sponsors information\r\nexport const getSponsors = async () => {\r\n    const records = await fetchRecords('Sponsors');\r\n    return records.map(record => ({\r\n        name: record.fields.Name,\r\n        logoUrl: record.fields.Logo?.[0]?.url,    // Access sponsor logo\r\n        website: record.fields.Website,\r\n    }));\r\n};\r\n\r\n// Function to fetch specific page content based on a filter formula\r\nexport const getPageContent = async (page) => {\r\n    try {\r\n        const url = `${baseUrl}/Pages?filterByFormula={Page}=\"${page}\"`;\r\n        const response = await fetch(url, { headers });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`Error: ${response.statusText}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        return data.records.length ? data.records[0].fields : null;\r\n    } catch (error) {\r\n        console.error(\"Error fetching page content:\", error);\r\n        return null;\r\n    }\r\n};\r\n"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAG,2BAA2B;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAMC,YAAY,GAAG,MAAOC,SAAS,IAAK;EACtC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,IAAIE,SAAS,EAAE,EAAE;MAAEG;IAAQ,CAAC,CAAC;IAEpE,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,UAAUJ,QAAQ,CAACK,UAAU,EAAE,CAAC;IACpD;IAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACE,OAAO;EACvB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,kCAAkCV,SAAS,GAAG,EAAEU,KAAK,CAAC;IACpE,OAAO,EAAE;EACb;AACJ,CAAC;;AAED;AACA,OAAO,MAAME,UAAU,GAAG,MAAAA,CAAA,KAAY;EAClC,MAAMH,OAAO,GAAG,MAAMV,YAAY,CAAC,SAAS,CAAC;EAC7C,OAAOU,OAAO,CAACI,GAAG,CAACC,MAAM,KAAK;IAC1BC,IAAI,EAAED,MAAM,CAACE,MAAM,CAACC,IAAI;IACxBC,IAAI,EAAEJ,MAAM,CAACE,MAAM,CAACG;EACxB,CAAC,CAAC,CAAC;AACP,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EACnC,MAAMX,OAAO,GAAG,MAAMV,YAAY,CAAC,UAAU,CAAC;EAC9C,OAAOU,OAAO,CAACI,GAAG,CAACC,MAAM,KAAK;IAC1BO,IAAI,EAAEP,MAAM,CAACE,MAAM,CAACM,IAAI;IAAI;IAC5BC,IAAI,EAAET,MAAM,CAACE,MAAM,CAACQ,IAAI;IAAI;IAC5BC,MAAM,EAAEX,MAAM,CAACE,MAAM,CAACU,MAAM,CAAG;EACnC,CAAC,CAAC,CAAC;AACP,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EAClC,MAAMlB,OAAO,GAAG,MAAMV,YAAY,CAAC,SAAS,CAAC;EAC7C,OAAOU,OAAO,CAACI,GAAG,CAACC,MAAM;IAAA,IAAAc,qBAAA,EAAAC,sBAAA;IAAA,OAAK;MAC1BC,IAAI,EAAEhB,MAAM,CAACE,MAAM,CAACe,IAAI;MACxBC,QAAQ,EAAElB,MAAM,CAACE,MAAM,CAACiB,QAAQ;MAChCC,cAAc,GAAAN,qBAAA,GAAEd,MAAM,CAACE,MAAM,CAAC,iBAAiB,CAAC,cAAAY,qBAAA,wBAAAC,sBAAA,GAAhCD,qBAAA,CAAmC,CAAC,CAAC,cAAAC,sBAAA,uBAArCA,sBAAA,CAAuCM,GAAG,CAAG;IACjE,CAAC;EAAA,CAAC,CAAC;AACP,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EAClC,MAAM3B,OAAO,GAAG,MAAMV,YAAY,CAAC,SAAS,CAAC;EAC7C,OAAOU,OAAO,CAACI,GAAG,CAACC,MAAM,KAAK;IAC1BuB,OAAO,EAAEvB,MAAM,CAACE,MAAM,CAACsB,OAAO;IAAI;IAClCC,OAAO,EAAEzB,MAAM,CAACE,MAAM,CAACwB,OAAO,CAAI;EACtC,CAAC,CAAC,CAAC;AACP,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EACnC,MAAMhC,OAAO,GAAG,MAAMV,YAAY,CAAC,UAAU,CAAC;EAC9C,OAAOU,OAAO,CAACI,GAAG,CAACC,MAAM;IAAA,IAAA4B,oBAAA,EAAAC,qBAAA;IAAA,OAAK;MAC1BC,OAAO,EAAE9B,MAAM,CAACE,MAAM,CAAC6B,OAAO;MAAI;MAClCC,IAAI,EAAEhC,MAAM,CAACE,MAAM,CAAC+B,IAAI;MACxBC,WAAW,EAAElC,MAAM,CAACE,MAAM,CAACiC,WAAW;MACtCC,QAAQ,GAAAR,oBAAA,GAAE5B,MAAM,CAACE,MAAM,CAACmC,KAAK,cAAAT,oBAAA,wBAAAC,qBAAA,GAAnBD,oBAAA,CAAsB,CAAC,CAAC,cAAAC,qBAAA,uBAAxBA,qBAAA,CAA0BR,GAAG,CAAG;IAC9C,CAAC;EAAA,CAAC,CAAC;AACP,CAAC;;AAED;AACA,OAAO,MAAMiB,WAAW,GAAG,MAAAA,CAAA,KAAY;EACnC,MAAM3C,OAAO,GAAG,MAAMV,YAAY,CAAC,UAAU,CAAC;EAC9C,OAAOU,OAAO,CAACI,GAAG,CAACC,MAAM;IAAA,IAAAuC,mBAAA,EAAAC,oBAAA;IAAA,OAAK;MAC1BxB,IAAI,EAAEhB,MAAM,CAACE,MAAM,CAACe,IAAI;MACxBwB,OAAO,GAAAF,mBAAA,GAAEvC,MAAM,CAACE,MAAM,CAACwC,IAAI,cAAAH,mBAAA,wBAAAC,oBAAA,GAAlBD,mBAAA,CAAqB,CAAC,CAAC,cAAAC,oBAAA,uBAAvBA,oBAAA,CAAyBnB,GAAG;MAAK;MAC1CsB,OAAO,EAAE3C,MAAM,CAACE,MAAM,CAAC0C;IAC3B,CAAC;EAAA,CAAC,CAAC;AACP,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAG,MAAO5C,IAAI,IAAK;EAC1C,IAAI;IACA,MAAMoB,GAAG,GAAG,GAAGrC,OAAO,kCAAkCiB,IAAI,GAAG;IAC/D,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAACiC,GAAG,EAAE;MAAEhC;IAAQ,CAAC,CAAC;IAE9C,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,UAAUJ,QAAQ,CAACK,UAAU,EAAE,CAAC;IACpD;IAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACE,OAAO,CAACmD,MAAM,GAAGrD,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACO,MAAM,GAAG,IAAI;EAC9D,CAAC,CAAC,OAAON,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,OAAO,IAAI;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}